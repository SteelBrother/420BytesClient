@page "/"
@using Syncfusion.Blazor.Buttons
@using _420BytesClient.App.ViewModels.Scheduler.Interfaces;
@using _420BytesClient.DT.Scheduler;
@inject IAppointment_ViewModel IAppointment_ViewModel
@inject IJSRuntime js

<div class="calendar-container" style="width: 100%; overflow-x: scroll;">
    <div class="calendar">
        <div class="month">November 2023</div>
        <div class="navigation">
            <button onclick="previousMonth()">&lt;</button>
            <button onclick="nextMonth()">&gt;</button>
        </div>
        <div class="days-container" style="display: flex; flex-direction: row; justify-content: flex-start;"></div>
    </div>
</div>

<style>
    /* Estilos comunes */
    .calendar-container {
        overflow-x: scroll;
        /* white-space: wrap; */
        width: 100%;
        font-family: Arial, sans-serif;
        max-width: 100%; /* Evita que se extienda más allá del ancho de la pantalla */
    }

    .calendar {
        display: inline-block;
        box-sizing: border-box;
        white-space: nowrap;
        padding: 2vw 0; /* Ajuste del espacio usando vw */
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        background-color: #333;
        width: 90%; /* Porcentaje del ancho del contenedor padre */
        max-width: 100%; /* Evita que se extienda más allá del ancho de la pantalla */
        margin: 0 auto; /* Centra el calendario */
    }

    .month {
        margin-bottom: 1vw; /* Ajuste del espacio usando vw */
        font-size: 3vw; /* Tamaño de fuente relativo */
        font-weight: bold;
        color: #4b4b4b;
    }

    .navigation {
        font-size: 2vw; /* Tamaño de fuente relativo */
        margin-bottom: 1vw;
    }

    .days-container {
        display: flex;
        justify-content: center;      
        padding: 2vw;
        overflow-x: scroll; /* Modified to enable horizontal scrolling */
        max-width: 100%;
       
    }


    .day {
        height: 30px;
        margin: 5px;
        border: 1px solid #ccc;
        padding: 5px;
        background-image: linear-gradient(to right, #023B89, #37004D);
        border-color: transparent;
    }

    .selected {
        background-color: #37a270;
        border-color: #37a270;
    }

    /* Otras media queries según sea necesario... */
</style>
<script>
    var currentMonth = new Date().getMonth(); // Inicialmente, el mes actual
    function initializeCalendar() {
        var calendarContainers = document.getElementsByClassName('calendar-container');

        for (var i = 0; i < calendarContainers.length; i++) {
            var container = calendarContainers[i];
            var calendar = container.getElementsByClassName('calendar')[0];
            var daysContainer = calendar.getElementsByClassName('days-container')[0];
            var currentMonth = new Date().getMonth(); // Obtener el mes actual

            // Establecer el número de días y el nombre del mes
            var daysInMonth = new Date(2023, currentMonth + 1, 0).getDate();
            var monthName = new Date(2023, currentMonth, 1).toLocaleString('default', { month: 'long' });

            // Mostrar el nombre del mes
            var monthElement = calendar.getElementsByClassName('month')[0];
            monthElement.textContent = monthName + ' 2023';

            // Generar los días del mes
            daysContainer.innerHTML = ''; // Limpiar el contenedor de días antes de generarlos

            for (var j = 1; j <= daysInMonth; j++) {
                var dayElement = document.createElement('div');
                dayElement.classList.add('day');
                dayElement.textContent = j;

                // Agregar cada día al contenedor de días
                daysContainer.appendChild(dayElement);
            }
        }
    }

    function generateMonth(month) {
        var calendarContainers = document.getElementsByClassName('calendar-container');

        for (var i = 0; i < calendarContainers.length; i++) {
            var container = calendarContainers[i];
            var calendar = container.getElementsByClassName('calendar')[0];
            var daysContainer = calendar.getElementsByClassName('days-container')[0];

            var daysInMonth = new Date(2023, month + 1, 0).getDate();
            var monthName = new Date(2023, month, 1).toLocaleString('default', { month: 'long' });

            var monthElement = calendar.getElementsByClassName('month')[0];
            monthElement.textContent = monthName + ' 2023';

            daysContainer.innerHTML = '';

            for (var j = 1; j <= daysInMonth; j++) {
                var dayElement = document.createElement('div');
                dayElement.classList.add('day');
                dayElement.textContent = j;

                daysContainer.appendChild(dayElement);
            }
        }
    }

    function previousMonth() {
        currentMonth--;
        generateMonth(currentMonth);
    }

    function nextMonth() {
        currentMonth++;
        generateMonth(currentMonth);
    }


    document.addEventListener('DOMContentLoaded', function () {
        initializeCalendar();
    });
</script>



<SfSchedule TValue="AppointmentData" Height="600px" @bind-SelectedDate="@IAppointment_ViewModel.CurrentDate">
    <ScheduleEvents TValue="AppointmentData" OnActionBegin="OnActionBegin"></ScheduleEvents>
    <ScheduleEventSettings DataSource="@IAppointment_ViewModel.DataSource"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
        <ScheduleView Option="View.MonthAgenda"></ScheduleView>
        <ScheduleView Option="View.TimelineDay"></ScheduleView>
        <ScheduleView Option="View.TimelineMonth"></ScheduleView>
        <ScheduleView Option="View.Year"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

@code {

    protected async override Task OnInitializedAsync()
    {
        await IAppointment_ViewModel.ObtenerTodoPorDocumentoAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("initializeCalendar");
        }
    }

    public async void OnActionBegin(ActionEventArgs<AppointmentData> args)
    {
        switch (args.ActionType)
        {
            case ActionType.EventCreate:
                await IAppointment_ViewModel.AgregarCitaAsync(args.AddedRecords.FirstOrDefault());
                break;
            case ActionType.EventRemove:
                await IAppointment_ViewModel.BorrarCitaAsync(args.DeletedRecords.FirstOrDefault().Id);
                break;
            case ActionType.EventChange:
                await IAppointment_ViewModel.ActualizarCitaAsync(args.ChangedRecords.FirstOrDefault());
                break;
            case ActionType.DateNavigate:
                var w = 1;
                break;
            case ActionType.ViewNavigate:
                var g = 1;
                break;
            default:
                break;
        }
    }
} 